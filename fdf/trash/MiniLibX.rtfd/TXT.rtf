{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Georgia;\f4\fswiss\fcharset0 ArialMT;\f5\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red242\green242\blue242;\red49\green53\blue57;
\red255\green255\blue255;\red184\green14\blue61;\red247\green238\blue241;\red26\green27\blue29;\red234\green234\blue234;
\red47\green180\blue29;\red46\green174\blue187;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38400\viewh21600\viewkind1
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs16 \cf0 MiniLibX - XQuartz\
\
1) Installation avec XQuartz\
{\field{\*\fldinst{HYPERLINK "https://achedeuzot.me/2014/12/20/installer-la-minilibx/"}}{\fldrslt https://achedeuzot.me/2014/12/20/installer-la-minilibx/}}\
$ sudo port -v install xorg-server\
pour installer uniquement la partie serveur\
$ sudo port -v install org\
pour tout installer\
\
Si cela ne marche pas alors il faut allez sur le site www.quartz.org pour t\'e9l\'e9charger le fichier .dmg\
Ensuite il faudra cliquer sur lui dans les downloads pour qu\'92il soit mont\'e9 et lorsque la boite s\'92ouvre il faudra faire un clic droit sur le fichier .pkg et faire open with \'93Installer\'94\
sudo port -v install xorg-server\
La proc\'e9dure d\'92installation se lance.\
Faire successivement :\
- Continue\
- Continue\
- Continue\
- Agree\
- Install\
- Donnez le password administrateur et cliquez sur \'93Install Software\'94\
Cela prend quelques minutes\'85\
On vous propose de sortir pour relancer Quartz comme serveur X11 par d\'e9faut\
\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 achedeuzot@~ $ wget\'a0http://files.achedeuzot.me/42/mlx/mlx-2014-01-06.tgz\
achedeuzot@~ $ tar -xzf\'a0mlx-2014-01-06.tgz\
achedeuzot@~ $ cd minilibx\
achedeuzot@~/minilibx $ make\
achedeuzot@~/minilibx $ cd test\
achedeuzot@~/minilibx/test $ ./mlx-test # Vous permet de savoir si la compilation de la lib a r\'e9ussi\
achedeuzot@~/minilibx/test $ cd ..\
achedeuzot@~/minilibx $ sudo cp mlx.h /usr/X11/include\
achedeuzot@~/minilibx $ sudo cp libmlx.a /usr/X11/lib\
achedeuzot@~/minilibx $ sudo cp libmlx_intel-mac.a /usr/X11/lib\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf0 \CocoaLigature0 2) Installation Native Mac OSX\
cd\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec2 achedeuzot@~ $ wget http://files.achedeuzot.me/42/mlx/mlx-macosx-2015-03-10.tgz\
achedeuzot@~ $ tar -xzf mlx-macosx-2015-03-10.tgz\
achedeuzot@~ $ cd minilibx_macos\
achedeuzot@~/minilibx_macos $ make\
achedeuzot@~/minilibx_macos $ sudo cp mlx.h /usr/X11/include\
achedeuzot@~/minilibx_macos $ sudo cp libmlx.a /usr/X11/lib\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf0 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 \
3) Test\
Cr\'e9ez un fichier hello.c\
\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec2 #include <stdlib.h>\
#include <stdio.h>\
#include <string.h>\
#include <mlx.h>\
\
typedef struct    data_s\
\{\
    void          *mlx_ptr;\
    void          *mlx_win;\
\}                 data_t;\
\
int main(void)\
\{\
    data_t        data;\
\
    if ((data.mlx_ptr = mlx_init()) == NULL)\
        return (EXIT_FAILURE);\
    if ((data.mlx_win = mlx_new_window(data.mlx_ptr, 640, 480, "Hello world")) == NULL)\
        return (EXIT_FAILURE);\
    mlx_loop(data.mlx_ptr);\
    return (EXIT_SUCCESS);\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf0 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 \
Compilation\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec2 gcc -I /usr/X11/include -g -L/usr/X11/lib -lX11 -lmlx -lXext hello.c\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf0 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 \
\pard\pardeftab720\sl540\sa400\partightenfactor0

\f3\b \cf4 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec4 Attention,\'a0pour la lib native Mac OSX
\b0 , il faut rajouter les flags
\f1 \cf6 \cb7 \strokec6 -framework OpenGL -framework AppKit
\f3 \cf4 \cb5 \strokec4 \'a0 en plus:\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb3 \strokec2 achedeuzot@~ $ gcc -I /usr/X11/include -g -L/usr/X11/lib -lX11 -lmlx -lXext -framework OpenGL -framework AppKit <fichier(s) .c>\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf0 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 \
\pard\pardeftab720\sl900\sa600\partightenfactor0

\f0\b \cf4 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec4 Quelques petits pi\'e8ges \'e0 \'e9viter\kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sl540\sa400\partightenfactor0

\f3\b0 \cf4 \expnd0\expndtw0\kerning0
Si le sujet ne pr\'e9cise pas la possibilit\'e9 d\'92utiliser la fonction syst\'e8me 
\f1 \cf6 \cb7 \strokec6 exit()
\f3 \cf4 \cb5 \strokec4 , c\'92est une erreur de sujet. En effet, il est impossible de quitter \'ab\'a0proprement\'a0\'bb la miniLibX, il faut forc\'e9ment faire un 
\f1 \cf6 \cb7 \strokec6 exit()
\f3 \cf4 \cb5 \strokec4 \'a0ou quitter 
\i sauvagement
\i0  via le bouton \'ab\'a0Fermer\'a0\'bb de la fen\'eatre. D\'92anciennes l\'e9gendes parlent d\'92une fonction
\f1 \cf6 \cb7 \strokec6 mlx_loop_stop()
\f3 \cf4 \cb5 \strokec4  mais elle n\'92est pas pr\'e9sente dans les sources fournies ici.\
Lorsque vous initialisez la mlx, avec 
\f1 \cf6 \cb7 \strokec6 mlx_init()
\f3 \cf4 \cb5 \strokec4 , attention aux environnements shell vides, c\'92est \'e0 dire, n\'92oubliez pas de prot\'e9ger votre
\f1 \cf6 \cb7 \strokec6 mlx_init()
\f3 \cf4 \cb5 \strokec4  car si votre appel de fonction n\'92est pas correctement prot\'e9g\'e9, vous aurez un joli plantage en r\'e8gle, allez tout droit en prison, sans passer par la case d\'e9part, ne touchez pas 20 000\'80. La commande pour tester cela vous m\'eame:\'a0
\f1 \cf6 \cb7 \strokec6 $ env -i <votre-executable>
\f3 \cf4 \cb5 \strokec4  S\'92il plante,\'a0c\'92est que vous ne l\'92avez pas bien prot\'e9g\'e9 \cb1 \dn4 \cb5 \up0 \
Si vous avez utilis\'e9 un paquet Debian ou une autre m\'e9thode d\'92installation, il est possible de devoir rajouter un dossier d\'92include pour la compilation:\'a0
\f1 \cf6 \cb7 \strokec6 -I /opt/X11/include/X11
\f3 \cf4 \cb5 \strokec4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf0 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 Installation des man\
\pard\pardeftab720\sl390\partightenfactor0

\f4 \cf8 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec8 The man pages on MacOS X are located in 
\f2 \cb9 /usr/share/man\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 sudo cp -R man1/* /usr/share/man/man1/\
si le man3 n\'92existe pas faire\
mkdir /usr/share/man/man3\
sudo cp -R man3/* /usr/share/man/man3/\
\
Fonctions mlx\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f5\b \cf10 \uc0\u10140   \cf11 minilibx
\f2\b0 \cf0  cat mlx.h \
/*\
** mlx.h for MinilibX in \
** \
** Made by Charlie Root\
** Login   <ol@epitech.net>\
** \
** Started on  Mon Jul 31 16:37:50 2000 Charlie Root\
** Last update Tue May 15 16:23:28 2007 Olivier Crouzet\
*/\
\
/*\
**   MinilibX -  Please report bugs\
*/\
\
\
/*\
** FR msg - FR msg - FR msg\
**\
** La MinilibX utilise 2 librairies supplementaires qu'il\
**      est necessaire de rajouter a la compilation :\
**   -lmlx -lXext -lX11\
**\
** La MinilibX permet le chargement des images de type Xpm.\
** Notez que cette implementation est incomplete.\
** Merci de communiquer tout probleme de chargement d'image\
** de ce type.\
*/\
\
\
#ifndef MLX_H\
\
#define	MLX_H\
\
\
void	*mlx_init();\
/*\
**  needed before everything else.\
**  return (void *)0 if failed\
*/\
\
\
/*\
** Basic actions\
*/\
\
void	*mlx_new_window(void *mlx_ptr, int size_x, int size_y, char *title);\
/*\
**  return void *0 if failed\
*/\
int	mlx_clear_window(void *mlx_ptr, void *win_ptr);\
int	mlx_pixel_put(void *mlx_ptr, void *win_ptr, int x, int y, int color);\
/*\
**  origin for x & y is top left corner of the window\
**  y down is positive\
**  color is 0x00RRGGBB\
*/\
\
\
/*\
** Image stuff\
*/\
\
void	*mlx_new_image(void *mlx_ptr,int width,int height);\
/*\
**  return void *0 if failed\
**  obsolete : image2 data is stored using bit planes\
**  void	*mlx_new_image2(void *mlx_ptr,int width,int height);\
*/\
char	*mlx_get_data_addr(void *img_ptr, int *bits_per_pixel,\
			   int *size_line, int *endian);\
/*\
**  endian : 0 = sever X is little endian, 1 = big endian\
**  for mlx_new_image2, 2nd arg of mlx_get_data_addr is number_of_planes\
*/\
int	mlx_put_image_to_window(void *mlx_ptr, void *win_ptr, void *img_ptr,\
				int x, int y);\
unsigned int	mlx_get_color_value(void *mlx_ptr, int color);\
\
\
/*\
** dealing with Events\
*/\
\
int	mlx_mouse_hook (void *win_ptr, int (*funct_ptr)(), void *param);\
int	mlx_key_hook (void *win_ptr, int (*funct_ptr)(), void *param);\
int	mlx_expose_hook (void *win_ptr, int (*funct_ptr)(), void *param);\
\
int	mlx_loop_hook (void *mlx_ptr, int (*funct_ptr)(), void *param);\
int	mlx_loop (void *mlx_ptr);\
\
\
/*\
**  hook funct are called as follow :\
**\
**   expose_hook(void *param);\
**   key_hook(int keycode, void *param);\
**   mouse_hook(int button, int x,int y, void *param);\
**   loop_hook(void *param);\
**\
*/\
\
\
/*\
**  Usually asked...\
*/\
\
int	mlx_string_put(void *mlx_ptr, void *win_ptr, int x, int y, int color,\
		       char *string);\
void	*mlx_xpm_to_image(void *mlx_ptr, char **xpm_data,\
			  int *width, int *height);\
void	*mlx_xpm_file_to_image(void *mlx_ptr, char *filename,\
			       int *width, int *height);\
int	mlx_destroy_window(void *mlx_ptr, void *win_ptr);\
\
int	mlx_destroy_image(void *mlx_ptr, void *img_ptr);\
\
/*\
**  generic hook system for all events, and minilibX functions that\
**    can be hooked. Some macro and defines from X11/X.h are needed here.\
*/\
\
int	mlx_hook(void *win_ptr, int x_event, int x_mask,\
                 int (*funct)(), void *param);\
\
int	mlx_do_key_autorepeatoff(void *mlx_ptr);\
int	mlx_do_key_autorepeaton(void *mlx_ptr);\
int	mlx_do_sync(void *mlx_ptr);\
\
#endif /* MLX_H */}